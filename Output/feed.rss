<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Bitomule's learning shack</title><description>My thoughts about iOS, technology or any other thing that comes to my mind.</description><link>https://testblog.bitomule.com</link><language>en</language><lastBuildDate>Mon, 13 Apr 2020 18:12:53 +0000</lastBuildDate><pubDate>Mon, 13 Apr 2020 18:12:53 +0000</pubDate><ttl>250</ttl><atom:link href="https://testblog.bitomule.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/Moving%20blog%20again</guid><title>Moving blog again</title><description></description><link>https://testblog.bitomule.com/posts/Moving%20blog%20again</link><pubDate>Mon, 13 Apr 2020 17:52:00 +0000</pubDate><content:encoded><![CDATA[<h1>Moving blog again</h1><p>I like to play, and I like to play with new things that force me into the unknown (Just a bit). In this case that interested was powered by my old hosting getting into constants problems. I don’t use this blog much but each time I wanted to share a link to explain something the docker running in my home NAS failed.</p><p>It was failing for many reasons, all related to how difficult it is to host something at home using a home network. Last months were better, I was able to fix a huge issue related with the NAS network and it was working 99.99% of the time but I still had to keep docker running always and eating resources from my not so big NAS.</p><p>So, I decided to give <a href="https://github.com/JohnSundell/Publish">John Sundell Publish</a> a chance following <a href="https://www.staskus.io/posts/2020-01-26-publish/">this post</a>. It was really easy because Povilas also has all the blog code on GitHub so he solved one of my big issues: HTML &amp; CSS. Based on his amazing work I was able to get the blog up and running.</p><p>Some changes from my previous blog:</p><ul><li><strong>New design</strong> (still really simple)</li><li><strong>100% static</strong>. For me, that means hosting in GitHub for free</li><li><strong>Fast</strong>: Because it’s just plain HTML + CSS, served from GitHub and using Cloudflare blog is now crazy fast (As it should be, is just text)</li></ul><p>What hasn’t changed:</p><ul><li><strong>No tracking</strong>: I hate websites tracking so I’m not going to add one to my blog. The only metrics I get are from Cloudflare and that’s just the number of visits.</li><li><strong>https</strong>: It was just a toggle in Cloudflare so...</li></ul><p>That’s all for today, please let me know on twitter if you’ll like to read a post explaining all the blog migration process including Publish usage, GitHub pages, and Cloudflare.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2019-06-25-my-journey-from-rxswift-to-combine</guid><title>My Journey from RxSwift to Combine</title><description></description><link>https://testblog.bitomule.com/posts/2019-06-25-my-journey-from-rxswift-to-combine</link><pubDate>Tue, 25 Jun 2019 16:35:00 +0000</pubDate><content:encoded><![CDATA[<h1>My Journey from RxSwift to Combine</h1><p>Some days Ago I decided it was the perfect time to start trying Combine by introducing it into my latest project <a href="https://blog.bitomule.com/kitchenorder/">(The app I made for my father)</a> and this is the story on what issues I’ve found, what I have learned and what I had to fix myself.</p><h2>iOS 13</h2><p>The latest Apple release was the biggest change since Swift and I think it could be even bigger.</p><p>Keep in mind that Combine is only available for &gt;= iOS 13, it’ll grow in the future and right now feels like it’s far from finished. For <a href="https://kitchenorder.app">KitchenOrder</a> it’s ok to make iOS 13 a requirement, but we’ll have to wait years before we can introduce it in other projects.</p><h2>Realm</h2><p>The first bump in the road I found trying to introduce Combine was the usage of <a href="https://github.com/RxSwiftCommunity/RxRealm">RxRealm</a>: an amazing library that adds reactivity to Realm using RxSwift.</p><p>The problem was replacing the amazing job by RxSwift contributors with a Combine based approach. There wasn’t a library doing this task for me so I decided to build my own: “there’s no much difference between RxSwift and Combine, it should be an easy task”, I (wrongly) thought.</p><p>Realm has a nice notification based way to get changes from Realm itself, queries (Results) and single objects and I already had experience with it because I built the same thing for <a href="https://medium.com/@Bitomule/creating-reactiveswiftrealm-part-1-248ac5c721af">ReactiveCocoa</a> some years ago. It works like this:</p><pre><code>     <span class="keyword">let</span> token = collection.<span class="call">observe</span> { changeset <span class="keyword">in</span> ... }
</code></pre><p>If you know a bit about RxSwift it’ll be trivial to transform this into an Observable and there’s only one tricky part you’ll have to consider: <strong>the token</strong>. You have to store that token while the observable is alive and invalidate it once the observable is finished. If you get this wrong, you’ll get no changes because notification is dead before you even receive the first change or it will stay alive forever.</p><p>In RxSwift they used the <strong>Disposable.create</strong> callback that gets called when your observer gets disposed. That’s perfect: your notification life is attached to your observer.</p><p>The problem is that Combine does not work in the same way: you don’t return a Disposable, in fact, when building a Publisher you don’t return anything. There’s not an onDisposed or deinit callback. So... How did I fix it?</p><p>Welcome to handleEvents:</p><pre><code>     <span class="keyword">public func</span> handleEvents(receiveSubscription: ((<span class="type">Subscription</span>) -&gt; <span class="type">Void</span>)? = <span class="keyword">nil</span>, receiveOutput: ((<span class="type">Self</span>.<span class="type">Output</span>) -&gt; <span class="type">Void</span>)? = <span class="keyword">nil</span>, receiveCompletion: ((<span class="type">Subscribers</span>.<span class="type">Completion</span>&lt;<span class="type">Self</span>.<span class="type">Failure</span>&gt;) -&gt; <span class="type">Void</span>)? = <span class="keyword">nil</span>, receiveCancel: (() -&gt; <span class="type">Void</span>)? = <span class="keyword">nil</span>, receiveRequest: ((<span class="type">Subscribers</span>.<span class="type">Demand</span>) -&gt; <span class="type">Void</span>)? = <span class="keyword">nil</span>) -&gt; <span class="type">Publishers</span>.<span class="type">HandleEvents</span>&lt;<span class="type">Self</span>&gt;
</code></pre><p>Nice, isn’t it? (Generics can melt your brain)</p><p>It’s like the do operator on RxSwift. It allows us to execute code when specific events happen. In this case, the events we are interested in are <strong>receiveCompletion</strong> and <strong>receiveCancel</strong>. Those are the 2 cases where we need to invalidate the token so I added the code to my publisher init call:</p><pre><code>     .<span class="call">handleEvents</span>(receiveCompletion: { <span class="keyword">_ in</span>
        token?.<span class="call">invalidate</span>()
    }, receiveCancel: {
        token?.<span class="call">invalidate</span>()
    })
</code></pre><p>But this doesn’t compile. The return type of handleEvents is not AnyPublisher, it’s a completely different type that conforms to Publisher protocol. To get the proper type back we’ve to use <strong>eraseToAnyPublisher()</strong>. Note this method down: if you start using Combine you’ll use it a lot, or at least that was my experience (I hope I’m wrong and there’s a better way to skip it).</p><pre><code>     .<span class="call">handleEvents</span>(receiveCompletion: { <span class="keyword">_ in</span>
        token?.<span class="call">invalidate</span>()
    }, receiveCancel: {
        token?.<span class="call">invalidate</span>()
    })
    .<span class="call">eraseToAnyPublisher</span>()
</code></pre><p>Once I had this solved I started to add new methods to my pod to observe realm, observe a collection, observe a changeset... And I found myself writing the same code again and again, so I extracted it and made it a bit more generic.</p><pre><code>     <span class="keyword">extension</span> <span class="type">Publisher</span> {
        <span class="keyword">func</span> onDispose(<span class="keyword">_</span> onDispose: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Output</span>, <span class="type">Failure</span>&gt; {
            <span class="keyword">return self</span>.<span class="call">handleEvents</span>(receiveCompletion: { <span class="keyword">_ in</span>
                onDispose()
            }, receiveCancel: {
                <span class="call">onDispose</span>()
            }).<span class="call">eraseToAnyPublisher</span>()
        }
    }
</code></pre><p>Now the code was a bit nicer:</p><pre><code>     .<span class="call">onDispose</span> {
        token?.<span class="call">invalidate</span>()
    }
</code></pre><p>So far I had found 2 issues adding Combine to my RxSwift project. One a bit specific of the use case, but I’ve found myself using reaseToAnyPublisher() <strong>A LOT</strong>.</p><h2>DisposeBag</h2><p>This problem may be specific to how you use Combine. In this case it´s replacing RxSwift without any UI binding.</p><p>First, let me tell you how the UI layer works in my app:</p><ul><li>Presenter calls and subscribes to a Publisher</li><li>With each event, it tells the UI to update with x changes</li></ul><p>It’s not exactly the MVVM that seems to fit Combine and SwiftUI better.</p><p>With RxSwift this is not a problem because when you subscribe you can add the returned disposable to a dispose bag. This DisposeBag basically attaches the life of your observable to the DisposeBag instance. If the presenter is released, DisposeBag gets released and all your observers get disposed and released. An amazing job from RxSwift developers but... There’s no equivalent in Combine.</p><p>In Combine, when you execute sink (equivalent to subscribe) you get back a cancellable and is your responsibility to manage it and remember to call cancel on it when you need to cancel that Publisher.</p><p>Now, image the presenter consumes 2 publishers. I have to keep 2 references to the cancellables of those publishers and call cancel on them when my presenter gets released (deinit). If you do the same in all your presenters, It’ll become a mess difficult to keep updated. It’s really easy to forget calling cancel on one of this cancellables and keep an observable alive forever.</p><p>So, another issue, another fix. I created <a href="https://github.com/bitomule/CombineDisposeBag">another public repo</a> with a DisposeBag for Combine. It’s exactly the same behavior you get from RxSwift. You have to create DisposeBag and tell each subscription to get disposed by that DisposeBag you created. It’s really easy to use and makes migrating from RxSwift to Combine a lot easier. Of course, I’ve filled feedback to Apple because It’ll be a lot better if they fixed this kind of rough edges in Combine.</p><p>That’s all so far, please feel free to ask me on twitter <a href="https://twitter.com/Bitomule">@bitomule</a> and create issues or PRs (better) on both repositories <a href="https://github.com/bitomule/CombineRealm">CombineRealm</a> and <a href="https://github.com/bitomule/CombineDisposeBag">CombineDisposeBag</a>. I’ll keep learning and trying to share what I’ve learned.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2019-04-11-kitchenorder</guid><title>Introducing KitchenOrder</title><description></description><link>https://testblog.bitomule.com/posts/2019-04-11-kitchenorder</link><pubDate>Thu, 11 Apr 2019 17:06:00 +0000</pubDate><content:encoded><![CDATA[<h1>Introducing KitchenOrder</h1><p>Today is a great day. After some days of talking with Apple review team, I got my next app approved, <a href="https://kitchenorder.app">KitchenOrder</a>.</p><p>When I work on apps after work I use to work on apps I want to use, use my knowledge to help with the problems I have. <a href="https://itunes.apple.com/es/app/tripplan/id1241258595?mt=8">My first app</a> was developed to help me plan my trips and it was super useful (although I don’t use it that much these days) but this one I’m releasing today is different, in this case, the app was planned to solve a problem to my father.</p><h2>Why</h2><p>My father has always been a reference to me. He’s far from being a developer, but I’m sure he’s one of the best chefs in Spain and I find many related things between our jobs. Of course, I’m a terrible chef, because I learned many things from him but never got his love and passion for cooking.</p><p>This Christmas I decided my next app would be to help him because we’ve been discussing different approaches to different app models but never got anything done. This time I was decided. It had to be a simple app, of course, and focused on one single task: managing kitchen orders.</p><p>Managing a professional kitchen is absolute chaos because you have a lot of professionals working really hard and fast, but only one managing it: calling providers to get the products needed for the kitchen to work every day, avoiding conflicts and also developing new and interesting products. In this case I wanted to solve the part about ordering products.</p><p>This is usually done with a mastermind like my father does and notes, lots of papers, tickets, and more notes. Remember to call x this afternoon, when did we order olive oil the last time, it’s impossible we ran out of pears... Times have changed a bit and now it’s possible to order some products through WhatsApp but most of the time the process is done calling directly the provider.</p><p>Here’s where KitchenOrder will help my father and I hope someone else out there. KitchenOrder allows you to store providers, products, and orders in the easiest way possible and requiring just the basic information to work. Once you have providers and products stored you can create new orders, schedule them to be reminded in the future and even complete them like a todo list.</p><h2>Tech</h2><p>From a technical point of view I followed the architecture I feel more comfortable with (MVP + Clean), used modules with cocoapods splitting the app into horizontal layers and tried to kept the code as clean as possible, something difficult in personal projects where it’s easy to prioritize building fast to building good. Some technical details:</p><ul><li>All the cells you see are dynamic height</li><li>The app supports dynamic fonts</li><li>Lot’s of stack views</li><li><a href="https://www.revenuecat.com">RevenueCat</a></li><li>iPad support</li><li>Realm as database layer</li></ul><h3>Biggest challenges were:</h3><ul><li><strong>Working with my father as a customer</strong>: I love helping my father but I hate working with clients because you have to help them getting their ideas out and putting that into real features. In this case, it was really interesting and of course, my father was always trying to help and with a good attitude, a “good customer”</li><li><strong>Subscriptions</strong>: Adding subscriptions was really easy, I used <a href="https://www.revenuecat.com">RevenueCat</a> and the integration was less than a day (including the subscribe screen) but the problems started with Apple review. I spend a whole week sending the app for review, getting rejected, updating and that, even after having checked all the requirements (privacy, use terms, legal information... omg)</li></ul><h3>Why subscriptions?</h3><p>This was a difficult decision although it was in my mind since the beginning. As I said this app is mainly for my father so if I sell it in the App Store I need to get enough income to allow me to keep the updates coming. I don’t expect to get anything but in case there’s someone else out there interested in the app I think $5 is a fair price if it solves a professional problem to you.</p><h3>CloudKit</h3><p>On <a href="https://itunes.apple.com/es/app/tripplan/id1241258595?mt=8">Tripplan</a> I was already using CloudKit so I wanted to add it here too. I had it in mind since the beginning so I created plain data models in realm, added <a href="https://github.com/caiyue1993/IceCream">IceCream</a> pod and in a few minutes, the whole app database was being synced with CloudKit.</p><h3>Questions?</h3><p>I know this app won’t be interesting for many of you, but you can download it for free and if you find issues or anything interesting feel free to ask me on <a href="https://twitter.com/Bitomule">twitter</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2019-03-19-realm-type-safe-update-2</guid><title>Realm Type-Safe update</title><description></description><link>https://testblog.bitomule.com/posts/2019-03-19-realm-type-safe-update-2</link><pubDate>Tue, 19 Mar 2019 16:23:00 +0000</pubDate><content:encoded><![CDATA[<h1>Realm Type-Safe update</h1><p>A few days ago, at work, my colleague <a href="https://twitter.com/amartinezmes">@amartinezmes</a> informed me about an issue we were about to solve. He had to update a Realm object property as easy and as fast as possible because that process will happen tons of times. To do it he was about to use Realm Key-value coding and also the partial update option. The first approach was something like this:</p><pre><code>     <span class="keyword">func</span> update(id: <span class="type">Any</span>, keyToUpdate: <span class="type">String</span>, value: <span class="type">Any</span>) {
        <span class="keyword">guard let</span> idKey = <span class="type">OrderDataModel</span>.<span class="call">primaryKey</span>() <span class="keyword">else</span> { <span class="keyword">return</span> }
        <span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()
        <span class="keyword">try</span>! realm.<span class="call">write</span> {
            realm.<span class="call">create</span>(<span class="type">OrderDataModel</span>.<span class="keyword">self</span>, value: [idKey: id, keyToUpdate: value], update: <span class="keyword">true</span>)
        }
    }
</code></pre><p>Of course, we don't create Realm there and we use a generic data model but it's ok as an example.</p><p>This was fine, at least it was fast, but not good, it was 0 type safe and there's where the pair programming morning started. We had a lot of complexities to fight against due to generics, protocols, type erasure that we already have and require in our codebase that I'll ignore for this post.</p><p>Let's see what issues we can have with this approach:</p><ul><li>Id value could not match the data model id type</li><li>keyToUpdate could be wrong, is just a String</li><li>value can be of an unexpected type for that property. We can use a String for a boolean property and it'll crash on runtime</li></ul><p>Here's when the magic of Keypath came into action. I had read a post about keypaths some time ago but had never used them and this felt like the perfect chance.</p><p>We were sure we could change this:</p><pre><code>     <span class="keyword">func</span> update(id: <span class="type">Any</span>, keyToUpdate: <span class="type">String</span>, value: <span class="type">Any</span>)
</code></pre><p>into this:</p><pre><code>     <span class="keyword">func</span> update&lt;T:<span class="type">Any</span>&gt;(id: <span class="type">Any</span>, keyToUpdate: <span class="type">KeyPath</span>&lt;<span class="type">OrderDataModel</span>, <span class="type">T</span>&gt;, value: <span class="type">T</span>)
</code></pre><p>That will make the function almost 100% type-safe (let's ignore the id). Using this function won't allow us to use an invalid property and the value should always match the type from keypath so there can't be a type mismatch between both.</p><img src="https://media.giphy.com/media/NmerZ36iBkmKk/giphy.gif" alt="Magic gif"/><p>Now... there´s a small problem, Realm does not support keypaths, it requires a String and Keypaths doesn't have a way to be mapped into Strings.</p><p>We spend a bit more time finding the right solution to this and the best approach we could find was this:</p><ol><li> Create a protocol to represent DataModels that could provide a String from a key path</li></ol><pre><code>     <span class="keyword">protocol</span> KeypathStringConvertible {
        <span class="keyword">static func</span> stringValue(keyPath: <span class="type">AnyKeyPath</span>) -&gt; <span class="type">String</span>
    }
</code></pre><ol start="2"><li> Give it a default implementation</li></ol><pre><code>     <span class="keyword">extension</span> <span class="type">KeypathStringConvertible</span> {
        <span class="keyword">static public func</span> stringValue(keyPath: <span class="type">AnyKeyPath</span>) -&gt; <span class="type">String</span> {
            <span class="call">fatalError</span>(<span class="string">"stringValue has not been implemented"</span>)
        }
    }
</code></pre><ol start="3"><li> Extend PartialKeyPath to support stringValue when Root type matches the protocol</li></ol><pre><code>     <span class="keyword">extension</span> <span class="type">PartialKeyPath</span> <span class="keyword">where</span> <span class="type">Root</span>: <span class="type">KeypathStringConvertible</span> {
        <span class="keyword">var</span> stringValue: <span class="type">String</span> {
            <span class="keyword">return</span> <span class="type">Root</span>.<span class="call">stringValue</span>(keyPath: <span class="keyword">self</span>)
        }
    }
</code></pre><ol start="4"><li> Make our data models implement the protocol</li></ol><pre><code>     <span class="keyword">extension</span> <span class="type">OrderDataModel</span>: <span class="type">KeypathStringConvertible</span> {
        <span class="keyword">static func</span> stringValue(keyPath: <span class="type">AnyKeyPath</span>) -&gt; <span class="type">String</span> {
            <span class="keyword">switch</span> keyPath {
            <span class="keyword">case</span> \<span class="type">OrderDataModel</span>.<span class="property">completed</span>:
                <span class="keyword">return</span> <span class="string">"completed"</span>
            <span class="keyword">default</span>:
                <span class="call">fatalError</span>(<span class="string">"Unexpected keyPath"</span>)
            }
        }
    }
</code></pre><p>This is the weakest part, the one where we still have much to improve because it's manual and far from type-safe, any typo here will crash on runtime. We plan to fix this in the next step but at least is better to have string property names next to properties.</p><p>Now we can go back to our update function and make the magic happen:</p><pre><code>     <span class="keyword">func</span> update&lt;T:<span class="type">Any</span>&gt;(id: <span class="type">Any</span>, keyToUpdate: <span class="type">KeyPath</span>&lt;<span class="type">OrderDataModel</span>, <span class="type">T</span>&gt;, value: <span class="type">T</span>) {
        <span class="keyword">guard let</span> idKey = <span class="type">OrderDataModel</span>.<span class="call">primaryKey</span>() <span class="keyword">else</span> { <span class="keyword">return</span> }
        <span class="keyword">let</span> realm = <span class="keyword">try</span>! <span class="type">Realm</span>()
        <span class="keyword">try</span>! realm.<span class="call">write</span> {
            realm.<span class="call">create</span>(<span class="type">OrderDataModel</span>.<span class="keyword">self</span>, value: [idKey: id, keyToUpdate.<span class="property">stringValue</span>: value], update: <span class="keyword">true</span>)
        }
    }
</code></pre><p>Now our update function is type safe. Of course, this was only the first iteration, now we can expand Keypath to queries and fix that weak strings we´ve moved closer to the type definition.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2019-03-16-how-ynab-changed-my-life</guid><title>How YNAB changed my life</title><description></description><link>https://testblog.bitomule.com/posts/2019-03-16-how-ynab-changed-my-life</link><pubDate>Sat, 16 Mar 2019 10:30:00 +0000</pubDate><content:encoded><![CDATA[<h1>How YNAB changed my life</h1><p>I’ve been trying to write this post for months, but important things take time and YNAB has been one of the key parts for some years.</p><p>I discovered <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> listening to a popular Spanish podcast a few years ago when I was working as a freelance and I was struggling to get my economy under control. Having to save VAT each quarter while living in Madrid paying all the expenses was really hard and each month there were new surprises usually related to the car.</p><p>At that podcast, I heard that there was <a href="https://itunes.apple.com/es/book/ynab-pon-en-orden-tu-econom%C3%ADa-con-you-need-a-budget/id1031088775?l=en&amp;mt=11">a new book</a> about <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> in Spanish and that was the last thing I need to decide. I bought the book and read it on the same day (it was really short). The concepts behind <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> are really easy but powerful and I think that’s the part that changed the way I use the money. The <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> service is a tool to follow the methodology but you can follow it using excel or even a notepad. I’ll try to explain the main concepts behind the methodology but you have a lot of resources (even more in English) in <a href="https://www.youneedabudget.com">YNAB website</a>. They also sell a <a href="https://www.youneedabudget.com/book-order-now/">book</a> (I haven’t read it).</p><h2>Rule 1: Give Every Dollar A Job</h2><p>As soon as you get the money you have to decide what’s that money for. For example, You get your $1000 check and you set $300 to your summer holidays saving, $300 to groceries, $200 for your car insurance bill next month and $200 to go out and have some fun.</p><p>There’s an important point here, because (usually) our income will be limited you have to prioritize your expenses. Rent and invoices should be paid before holidays or buying a new iPhone.</p><p>You get some dollars, prioritize those dollars and follow that plan.</p><h2>Rule 2: Embrace Your True Expenses</h2><p>For me, this is the key rule. It makes expenses boring, you’re always ready to pay that month bills. Rule 2 says that you have to take your large and less-frequent expenses (yearly insurance) and break them into small monthly “bills”. If you follow this rule instead of paying $1200 each year you’ll pay $100 each month. Paying $1200 one month could destroy your economy, saving $100 each month may be easier. I always have a plan for all these big expenses from the same day I know I’ll have them. I use this technique to save for holidays, app yearly subscriptions (including <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a>), birthdays, Christmas gifs, buying a new iPhone…</p><h2>Rule 3: Roll With The Punches</h2><p>Life is flexible and so should be our budget. If you need to spend more in one category just remove some from another category. Never check your account balance yo know if you can spend on something, check the budget and if you want to overspend on some category because that’s now a priority remove some budget from another category until you have your whole budget in balance.</p><h2>Rule 4: Age Your Money</h2><p>Anyone with a bit of knowledge on the personal economy will tell you to save enough money to keep your life running for some months so in case you got or you don’t have an income you can still pay your bills. <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> just says that you have to pay current monthly expenses with the money you got one month ago. This is not related to saving for extra months, you can do that (and save for 3, 6 or even one year if you can). This is focused on normal monthly expenses, while you still have income. Right now I pay my bills with money I won 1 or 2 months ago.</p><p>Ok, that’s all the <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> method rules. I’ll only add one suggestion related to the first one but not so clear from their website. Each month you do your budget and you can’t over budget, you only budget the money you have even if you know that in a few days you’ll get an extra check. You budget from your available money (not the money in your account) and you expend based on your budget.</p><p>Now, let’s talk about how this changed my life. As I said, when I was working as freelance keeping my accounts under control was impossible. You get paid but that’s not the money you can use because you have to keep taxes on mind but I had to pay a high rent and car “surprises” come really unexpected. Unexpected expenses are the worst thing you can get when you already have problems. Once I started to use <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> economy slowly turned from pain to pleasure: instead of asking family for money I was saving for holidays, instead of worrying about car insurance I was happy to pay for it because I had the money already saved. There wasn’t any change on my income or my bills, the only change was knowing where do I want to expend it and where can I do it.</p><p>I started making decisions based on real information like If I stop spending money in having breakfast in the bar each morning I can go to a better place for holidays. Instead of thinking in big expenses I started to think in small budgets. Saving $5 each month to pay <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> is far easier than paying $60 on the month the subscription get renewed.</p><p>Once my budget was under control I started to improve it: What if I save a bit more and I get a 2 years subscription, what if I pay car insurance yearly instead of quarterly saving a %…</p><p>At that point, I had a bit more money each month on my pocket and I have the data to make prioritization decisions on my expenses. For example, last year I wanted to travel to Japan but I knew it was a huge expense, if I save just for a few months I won’t save enough to pay the flight so I needed a plan. I set a goal in <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">YNAB</a> (I love goals) one year before that holidays and I prioritized that category each month. Saving $300 each month is not easy but I was able to do it by avoiding other expenses because I had a plan, YNAB told me each month: “If you go out for dinner today you’ll won’t be able to visit Japan”</p><p>Right now I love checking my budget because my economy has changed from stress, pain and paying the unexpected to pleasure to holydays planning and deciding if I can buy that cool thing I want. My economy now is the way to get a better life instead of a way to keep me alive.</p><p>BTW, use <a href="https://ynab.com/referral/?ref=ZR3TKOTMYpCMxC6H&amp;utm_source=customer_referral">this link</a> to get one month free.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2019-03-12-tracking-your-site-metrics-without-sacrifycing-user-privacy</guid><title>Tracking your site metrics without sacrificing​ user privacy</title><description></description><link>https://testblog.bitomule.com/posts/2019-03-12-tracking-your-site-metrics-without-sacrifycing-user-privacy</link><pubDate>Tue, 12 Mar 2019 08:10:00 +0000</pubDate><content:encoded><![CDATA[<h1>Tracking your site metrics without sacrificing​ user privacy</h1><p>After having my blog up and running there was one piece missing, I didn't have any kind of tracking so it was impossible to know if people were reading me and what were they reading.</p><p>That's how I started to look for a solution that matched the next requirements:</p><ul><li>Respect users privacy</li><li>Self-hosted</li><li>Free</li><li>Easy to run with my current docker setup</li></ul><p>Looks impossible, doesn't it?</p><p>That's what I thought after some research. I saw lot's of options, the most commonly used was Google Analytics but that was far from what I wanted. When I was about to lose hope I found <a href="https://usefathom.com">Fathom</a> and suddenly all the checks were marked:</p><ul><li><strong>Respects user privacy?</strong> Yep, that's one of their core values. (You can read more about this <a href="https://usefathom.com/data/">here</a>)</li><li><strong>Self-hosted?</strong> Yep, It's open source and you can host it yourself.</li><li><strong>Free?</strong> Hell yes</li><li><strong>Easy to run with my current docker setup?</strong> Well, they have an official docker image, so it should be</li></ul><blockquote><p>Spoiler: Using their official docker image wasn't easy.</p></blockquote><p>I went to my beautiful <a href="https://blog.bitomule.com/using-portainer-to-manage-container-station/">portainer</a> client ready to install Fathom from the official image and after a few seconds, it was running. It was running but how do I configure it? Is there any shared volume I can use? Nothing... I couldn't make the official image work. <img src="https://testblog.bitomule.com/content/images/2019/03/200.gif"/> I went back to docker hub and I found another image, not official in this case but it had the missing part I needed: a volume.</p><p>This image was <strong><a href="https://hub.docker.com/r/geerlingguy/fathom">geerlingguy/fathom</a></strong> and again, in a few seconds, I had it working in portainer. I created a new shared volume (<a href="https://blog.bitomule.com/using-portainer-to-manage-container-station/">check my post about portainer to read about that</a>) and there started those tricky parts you spend hours searching on google because you don't know how to fix. But don't worry, I have all of them ready for you:</p><ul><li>You have to create and .env file in your shared volume with the content</li></ul><pre><code>     <span class="type">FATHOM_SERVER_ADDR</span>=<span class="number">9000</span>
    <span class="type">FATHOM_GZIP</span>=<span class="keyword">true</span>
    <span class="type">FATHOM_DEBUG</span>=<span class="keyword">true</span>
    <span class="type">FATHOM_DATABASE_DRIVER</span>=<span class="string">"sqlite3"</span>
    <span class="type">FATHOM_DATABASE_NAME</span>=<span class="string">"fathom.db"</span>
    <span class="type">FATHOM_SECRET</span>=<span class="string">"create-a-random-key-and-paste-it-here"</span>
</code></pre><ul><li>In order to protect your Fathom with user and password you should run in your docker terminal (connecting with portainer is really easy) :</li></ul><p>fathom user add <a href="--email="youremail@blabla.com">--email="youremail@blabla.com</a>" --password="strong-password"</p><ul><li>Map the port to want to use to the container port 9000</li><li>Reboot your container</li></ul><p>Once you have done this things your fathom instance should be up, running and accessible. You'll need the service to be accessible from the outside, I recommend using <a href="https://blog.bitomule.com/running-a-website-from-your-qnap-nas/">Caddy</a> so you get the proxy and the SSL for free.</p><p>The last part is adding the code snippet Fathom requires. You'll find it on your Fathom configuration (from the web UI).</p><p>Once you have set up the snipper you'll start receiving metrics on your dashboard free and without compromising your users' privacy.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2019-03-09-using-portainer-to-manage-container-station</guid><title>Using portainer to manage container station</title><description></description><link>https://testblog.bitomule.com/posts/2019-03-09-using-portainer-to-manage-container-station</link><pubDate>Sat, 9 Mar 2019 16:05:00 +0000</pubDate><content:encoded><![CDATA[<h1>Using portainer to manage container station</h1><p>Today I want to share another experience with my NAS, in this case, I'll talk about how to replace container station with a better alternative called Portainer.</p><p>As you may know, I've played with docker on my Qnap NAS. This has to lead me to hate container station software. It has too many limits and issues so as one of my experiments I wanted to find a replacement to it.</p><p>The best replacement I've found is portainer and as always, when you know what you want the steps to do it are a lot easier.</p><p>In this case, installing portainer was as easy as going to the community qnap store and installing <a href="https://forum.qnap.com/viewtopic.php?t=133975">Portainer</a>. After that, you'll have portainer up and running but it'll be useless. You have to connect it to your container station docker, and you can do it 4 easy steps:</p><ol><li> Open container station, go to preferences, docker certificate tab and copy the command you'll see in the "Set environment" field.</li><li>Open an SSH connection with your NAS (I'm assuming you already know how to do this, otherwise It'll be easy to find it on Google), paste the command you copied and execute it.</li><li>Go back to container station, same preferences screen and now click download. This will download the certificates required to connect to the local docker installation.</li><li>Open portainer, navigate to endpoints and create a new one filling:</li></ol><ul><li><strong>Name</strong> (The name you want to use)</li><li><strong>Endpoint Url</strong>: Your NAS IP with the port you saw on container station settings command</li><li><strong>Public IP</strong>: Your public IP / DDNS (if you want to)</li><li><strong>TLS</strong>: enabled</li><li><strong>Certificates and key</strong> (upload the ones you downloaded from container station preferences)</li></ul><p>Now you're ready to use portainer as a replacement to container station. You can download images, create containers, reboot... Just avoid using container station and portainer at the same time (some configurations don't work) and playing with network interfaces.</p><p>I've been using portainer for some days and It's working really well. For example, you can use the Caddy app template and follow my post to <a href="https://blog.bitomule.com/running-a-website-from-your-qnap-nas/">run your own site on your NAS.</a></p><p>If you have any question feel free to ask me on <a href="https://twitter.com/bitomule">twitter</a> or <a href="https://mastodon.social/@bitomule">mastodon</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2019-03-09-running-a-website-from-your-qnap-nas</guid><title>Running a website from your Qnap NAS</title><description></description><link>https://testblog.bitomule.com/posts/2019-03-09-running-a-website-from-your-qnap-nas</link><pubDate>Sat, 9 Mar 2019 08:44:00 +0000</pubDate><content:encoded><![CDATA[<h1>Running a website from your Qnap NAS</h1><p>The first proper post of the blog is something I don't do frequently: playing with the web. In this post, I'll explain how after some hours I got the blog running with a custom domain and SSL using docker in a qnap NAS. The process should work on any NAS (with Synology it could be even easier) but I'll explain it using the Qnap process.</p><h2>You'll need:</h2><ul><li>A Qnap NAS able to run docker</li><li>Static website you want to host (I used Publii for this part)</li><li>DDNS</li><li>Domain</li></ul><h2>Container Station</h2><p>The first thing you have to install (if you don't have it yet) is Container Station. Just install it from the app center.</p><h2>Folders</h2><p>You'll need 3 different folders on your NAS. Place them where you want to. In my case I created this shared folders with inner subfolders:</p><ul><li>Container Data</li><li>Caddy</li><li>conf</li><li>WebServer</li></ul><p>ContainerData is just for configuration and storage for the docker image and WebServer will be the root of the Caddy server, anything we place there will be server from Caddy.</p><h2>Caddy</h2><p><a href="https://caddyserver.com/">Caddy</a> is the key part of the process. It's a really simple web server and reverse proxy that creates certificates from let's encrypt automatically. The first step will be installing Caddy docker image on Container Station. If you are running the setup process for the first time it's possible you won't get the configuration loaded. In that case: create a container, delete and start the container creation again.</p><p>You'll have to setup:</p><ul><li>Environment: Here ACME_AGREE should be changed to true.</li><li>Network: Choose 3 free ports to make the redirection. You'll need to redirect these ports on the router so take your time to decide what ports are you going to use. The 2015 port is only for development, you don't need to open it on your router.</li><li>Shared folders: In the volume from the host section, you'll have to create 3 volumes. There's a trick. We need to map the configuration file but qnap doesn't allow us to map a file, just folders. To fix this just create a folder called Caddyfile inside conf and delete it once you finish the setup.</li></ul><img src="https://testblog.bitomule.com/content/images/2019/03/Captura-de-pantalla-2019-03-04-a-las-23.02.08-1.png" alt="Volumes configuration"/><h3>Configuration file</h3><p>We almost have Caddy ready, now we just need to create a new file named Caddyfile without extension inside the conf folder. The content, for example, could be:</p><pre><code>     yourowndomain.<span class="call">com</span> {
     tls youremail
    
     root /srv
     browse
    
     log stdout
     errors stdout
    }
</code></pre><p>Save it and restart your container. Caddy should start and it will register a new SSL certificate for your domain. Magic! <img src="https://testblog.bitomule.com/content/images/2019/03/giphy-1.gif"/></p><h2>Ports</h2><p>You'll have to redirect the ports you set up when creating the container. You have to redirect the external 80 port to the port you mapped to the docker 80 port and the same with 443. Your NAS will use custom ports but both external and docker internal ports should match.</p><h2>Domain</h2><p>There's only one missing part: the domain. You'll need to configure your domain to point to your DDNS host. If you have a fixed external IP just use that IP. In my case, I'm using name.com and the qnap DDNS.</p><p>At this point, you have everything ready. Your NAS is serving a static site with SSL. Serving dynamic content either from another service on your NAS on from another docker you'll have to use the IP. Don't use localhost, use the IP instead. For example:</p><pre><code>     yourcustomdomain.<span class="call">com</span> {   
    	tls youremail@here.<span class="property">com</span>   
    	proxy / https://<span class="number">192.168.1.57</span>:<span class="number">4433</span> {     
    		insecure_skip_verify     
    		transparent   
    	}
    }
</code></pre><p>This will allow you to proxy your domain to a different IP while keeping the SSL. Magic, again.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://testblog.bitomule.com/posts/2016-04-3-Calculate%20text%20size</guid><title>Getting text size on iOS</title><description></description><link>https://testblog.bitomule.com/posts/2016-04-3-Calculate%20text%20size</link><pubDate>Sun, 3 Apr 2016 16:35:00 +0000</pubDate><content:encoded><![CDATA[<h1>Getting text size on iOS</h1><p>I'm currently working on an iPhone app that uses a 3rd party chat software and adding some custom message types to it requires that collection cell height is precalculated. I don't remember all the iOS APIs on my head but a quick search on google just showed a UIFont extension that calculates a text box (UILabel or TextView) size. It was something like:</p><pre><code>		<span class="keyword">extension</span> <span class="type">UIFont</span> {
	<span class="keyword">func</span> sizeOfString (string: <span class="type">String</span>, constrainedToWidth width: <span class="type">Double</span>) -&gt; <span class="type">CGSize</span> {
	<span class="keyword">return</span> <span class="type">NSString</span>(string: string).<span class="call">boundingRectWithSize</span>(<span class="type">CGSize</span>(width: width, height: <span class="type">DBL_MAX</span>),
	options: <span class="type">NSStringDrawingOptions</span>.<span class="type">UsesLineFragmentOrigin</span>,
	attributes: [<span class="type">NSFontAttributeName</span>: <span class="keyword">self</span>],
	context: <span class="keyword">nil</span>).<span class="property">size</span>
	}
	}
</code></pre><p>It was easy and fast. I also needed it in another place to get width with a defined height so I changed it to allow it and done! Just using a font reference I can get the size of a text box. I added some tests just to be sure that it returns the same size I get in interface builder for my view (including margins and other views) and it worked perfect.</p><p>I continued developing other parts of the app but after a few days I saw a weird bug, one of us sent a message with a whole line composed only from emoji characters and then height calculation failed, that whole line was removed from view, my quick and easy method to calculate height was ignoring emoji. WTF!!</p><p>Back to google, searching for a bug report or something that could tell me why something so simple didn't work with emoji. I found some posts asking the same and one pointing on a direction I already know, using UILabel sizeToFit method. Ok, creating a UILabel each time I need a cell height isn't perfect but this collection view caches heights so it's something I can live with. Changed my method to use sizeToFit instead of boundingRectWithSize and... FAIL</p><p>Using sizeToFit returned the same size as boundingRectWithSize, I can't believe that both methods ignored emoji. That was a moment to stop and think: "there should be a way to do this but maybe not so easy". That made me start searching not so easy ways of getting text size in iOS. My first search was related to CoreText and I got a result that pointed me in the right direction: CTFramesetter</p><p>It was something I've never used but the only option I had so I went to official API docs and changed again my extension method to use it. The result? It worked!!</p><p>I'm not sure how fast it is but fixed the big issue I had. If you find the same issue hope you find this post and can just copy paste this code to your app:</p><pre><code>		<span class="keyword">func</span> sizeOfString (string: <span class="type">String</span>, constrainedToWidth width: <span class="type">Double</span>) -&gt; <span class="type">CGSize</span> {
	<span class="keyword">let</span> attributes = [<span class="type">NSFontAttributeName</span>:<span class="keyword">self</span>,]
	<span class="keyword">let</span> attString = <span class="type">NSAttributedString</span>(string: string,attributes: attributes)
	<span class="keyword">let</span> framesetter = <span class="type">CTFramesetterCreateWithAttributedString</span>(attString)
	<span class="keyword">return</span> <span class="type">CTFramesetterSuggestFrameSizeWithConstraints</span>(framesetter, <span class="type">CFRange</span>(location: <span class="number">0</span>,length: <span class="number">0</span>), <span class="keyword">nil</span>, <span class="type">CGSize</span>(width: width, height: <span class="type">DBL_MAX</span>), <span class="keyword">nil</span>)
	}
</code></pre>]]></content:encoded></item></channel></rss>